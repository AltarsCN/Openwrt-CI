#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string
      WRT_VERBOSE:
        required: false
        type: string
        default: 's'
      WRT_THREADS:
        required: false
        type: string
        default: '0'

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}
  WRT_VERBOSE: ${{inputs.WRT_VERBOSE}}
  WRT_THREADS: ${{inputs.WRT_THREADS}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ env.WRT_CONFIG }}-${{ github.ref }}-${{ github.sha }}
          max-size: 2G

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 5-)-$WRT_BRANCH" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV
          
          # 调试输出环境变量
          echo "调试: WRT_VERBOSE=$WRT_VERBOSE"
          echo "调试: WRT_THREADS=$WRT_THREADS"

      - name: Clone Code
        id: clone-code
        run: |
          set -euo pipefail
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/
          cd ./wrt/
          echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: Setup Build Cache (dl)
        uses: actions/cache@v3
        with:
          path: ./wrt/dl
          key: openwrt-dl-${{ env.WRT_CONFIG }}-${{ env.WRT_HASH }}
          restore-keys: |
            openwrt-dl-${{ env.WRT_CONFIG }}-
            openwrt-dl-

      - name: Setup Build Cache (ccache)
        uses: actions/cache@v3
        with:
          path: ./wrt/.ccache
          key: openwrt-ccache-${{ env.WRT_CONFIG }}-${{ env.WRT_HASH }}
          restore-keys: |
            openwrt-ccache-${{ env.WRT_CONFIG }}-
            openwrt-ccache-




      - name: Modify Feeds Source
        run: |
          FEEDS_FILE=./wrt/feeds.conf.default
          # 移除已有 nss_packages 源，避免重复
          if [ -f "$FEEDS_FILE" ]; then
            grep -v "^src-git nss_packages" "$FEEDS_FILE" > "$FEEDS_FILE.tmp" || true
            mv "$FEEDS_FILE.tmp" "$FEEDS_FILE"
          fi
          echo "src-git nss_packages https://github.com/qosmio/nss-packages.git;NSS-12.5-K6.x" >> "$FEEDS_FILE"

      - name: Check Scripts
        run: |
          set -euo pipefail
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      # 统一缓存策略，移除旧的 check caches 和 update caches 步骤，ccache 由 ccache-action 自动管理，dl/.ccache 由 actions/cache 管理

      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          # 设置线程数
          if [ "$WRT_THREADS" = "0" ]; then
            THREADS=$(nproc)
          else
            THREADS=$WRT_THREADS
          fi
          echo "使用线程数: $THREADS"
          echo "WRT_COMPILE_THREADS=$THREADS" >> $GITHUB_ENV

          make defconfig -j$THREADS && make clean -j$THREADS


      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$WRT_COMPILE_THREADS

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          mkdir -p logs
          
          echo "编译参数配置:"
          echo "  线程数: $WRT_COMPILE_THREADS"
          echo "  日志等级: $WRT_VERBOSE"
          echo "======================="
          
          # 日志等级说明（修正含义）：
          #   silent / s / 0 / quiet  -> 真实静默: 使用 make 自身的 -s，不再传 V（OpenWrt 默认最简）；仅错误/失败阶段才输出详细日志
          #   basic / 1               -> 适度输出（V=1）
          #   verbose / v             -> 常规详细（V=s，OpenWrt 的“short commands”/规则回显）
          #   commands / sc           -> 完整命令行（V=sc）
          #   debug / 99              -> 超级详细调试（V=99）
          # 说明：之前脚本把 V=s 当作“仅错误”，实际 OpenWrt 中 V=s 仍然会输出大量编译行；因此改为 silent 等级不设置 V，并使用 make -s。

          COMPILE_SUCCESS=0
          MAKE_BASE="make -j$WRT_COMPILE_THREADS"
          case "${WRT_VERBOSE,,}" in
            99|debug)
              echo "使用最详细日志等级 V=99"
              eval "$MAKE_BASE V=99" 2>&1 | tee logs/build.log
              COMPILE_SUCCESS=${PIPESTATUS[0]}
              ;;
            sc|commands)
              echo "显示全部命令 V=sc"
              eval "$MAKE_BASE V=sc" 2>&1 | tee logs/build.log
              COMPILE_SUCCESS=${PIPESTATUS[0]}
              ;;
            verbose|v)
              echo "常规详细输出 V=s"
              eval "$MAKE_BASE V=s" 2>&1 | tee logs/build.log
              COMPILE_SUCCESS=${PIPESTATUS[0]}
              ;;
            1|basic)
              echo "基本输出 V=1"
              eval "$MAKE_BASE V=1" 2>&1 | tee logs/build.log
              COMPILE_SUCCESS=${PIPESTATUS[0]}
              ;;
            s|silent|0|quiet|minimal)
              echo "静默模式（使用 make -s，不设置 V）"
              eval "$MAKE_BASE -s" 2>&1 | tee logs/build.log || true
              # 静默模式下 PIPESTATUS 不可靠，手动获取最后退出码
              COMPILE_SUCCESS=${PIPESTATUS[0]}
              ;;
            *)
              echo "未识别的日志等级: $WRT_VERBOSE -> 使用静默模式"
              eval "$MAKE_BASE -s" 2>&1 | tee logs/build.log || true
              COMPILE_SUCCESS=${PIPESTATUS[0]}
              ;;
          esac
          
          # 编译失败时的重试逻辑（单线程详细输出）
          if [ $COMPILE_SUCCESS -ne 0 ]; then
            echo "编译失败，进入分级重试（单线程递增详细度）..."
            make -j1 -s 2>&1 | tee logs/build_retry_quiet.log || \
            make -j1 V=1 2>&1 | tee logs/build_retry_basic.log || \
            make -j1 V=s 2>&1 | tee logs/build_retry_verbose.log || \
            make -j1 V=sc 2>&1 | tee logs/build_retry_commands.log || \
            make -j1 V=99 2>&1 | tee logs/build_retry_debug.log
          fi

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config_"$WRT_CONFIG"_"$WRT_VER"_"$WRT_DATE".txt

          # 打包构建日志
          if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
            tar -czf ./upload/BuildLogs_"$WRT_CONFIG"_"$WRT_VER"_"$WRT_DATE".tar.gz logs/
            echo "构建日志已打包"
          fi

          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$WRT_VER"_"$NAME"_"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$WRT_COMPILE_THREADS
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.WRT_CONFIG}}_${{env.WRT_VER}}_${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |


            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            提交：${{env.WRT_HASH}}

            配置：${{env.WRT_CONFIG}}
            平台：${{env.WRT_TARGET}}

            登录地址：${{env.WRT_IP}}
            登录密码：${{env.WRT_PW}}

            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}

            内核版本：${{env.WRT_KVER}}
            插件列表：${{env.WRT_LIST}}

            编译线程：${{env.WRT_COMPILE_THREADS}}
            日志等级：${{env.WRT_VERBOSE}}
